DROP TABLE MAIN.MASK0003 CASCADE CONSTRAINTS;

CREATE TABLE MAIN.MASK0003
(
  EMTIANO    VARCHAR2(16 BYTE),
  BARKOD     NUMBER(20),
  BIRIM      VARCHAR2(4 BYTE),
  AKTIF      NUMBER(1),
  INP_USER   VARCHAR2(30 BYTE),
  INP_DATE   DATE,
  UPD_USER   VARCHAR2(30 BYTE),
  UPD_DATE   DATE,
  BB         VARCHAR2(5 BYTE),
  BARACIKLA  VARCHAR2(50 BYTE),
  ANABARKOD  NUMBER(1),
  BEMTIANO   VARCHAR2(16 BYTE),
  CARPAN     NUMBER(3),
  BOLEN      NUMBER(3),
  CBARKOD    VARCHAR2(20 BYTE),
  NBARKOD    NUMBER(20)
)
TABLESPACE STOK
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          128K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE;


CREATE UNIQUE INDEX MAIN.PKSK0003 ON MAIN.MASK0003
(EMTIANO, BARKOD)
LOGGING
TABLESPACE USER_DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          128K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );
CREATE UNIQUE INDEX MAIN.UQSK1003 ON MAIN.MASK0003
(BARKOD)
LOGGING
TABLESPACE USER_DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          128K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );
CREATE UNIQUE INDEX MAIN.UQSK2003 ON MAIN.MASK0003
(EMTIANO, BARKOD, BIRIM)
LOGGING
TABLESPACE USER_DATA
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE MAIN.MASK0003 ADD (
  CONSTRAINT CKSK0003_AKTIF
  CHECK (AKTIF IN (0,1))
  ENABLE VALIDATE
,  CONSTRAINT SYS_C003683
  CHECK ("AKTIF" IS NOT NULL)
  ENABLE VALIDATE
,  CONSTRAINT PKSK0003
  PRIMARY KEY
  (EMTIANO, BARKOD)
  USING INDEX MAIN.PKSK0003
  ENABLE VALIDATE
,  CONSTRAINT UQSK1003
  UNIQUE (BARKOD)
  USING INDEX MAIN.UQSK1003
  ENABLE VALIDATE
,  CONSTRAINT UQSK2003
  UNIQUE (EMTIANO, BARKOD, BIRIM)
  USING INDEX MAIN.UQSK2003
  ENABLE VALIDATE);


CREATE INDEX MAIN.IDX$_MASK0003_10001 ON MAIN.MASK0003
(CBARKOD, BARKOD)
LOGGING
TABLESPACE ALL_INDEXES
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE INDEX MAIN.IXCBARKODSK0003 ON MAIN.MASK0003
(CBARKOD)
LOGGING
TABLESPACE ALL_INDEXES
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE INDEX MAIN.IXEMSK0003 ON MAIN.MASK0003
(EMTIANO)
LOGGING
TABLESPACE ALL_INDEXES
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE INDEX MAIN.IX88SK0003 ON MAIN.MASK0003
("BB"||TO_CHAR("BARKOD"))
LOGGING
TABLESPACE ALL_INDEXES
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE INDEX MAIN.X2SK0003 ON MAIN.MASK0003
(TO_CHAR("BARKOD"))
LOGGING
TABLESPACE ALL_INDEXES
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE INDEX MAIN.X3SK0003 ON MAIN.MASK0003
(BEMTIANO)
LOGGING
TABLESPACE ALL_INDEXES
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER MAIN.R1SK0003
BEFORE INSERT OR UPDATE OR DELETE ON MAIN.MASK0003
FOR EACH ROW
DECLARE
  wvar number(1);
  CURSOR C_MASK0031(QEMTIANO VARCHAR) IS SELECT SIRKETNO,EMTIANO FROM MASK0031 WHERE EMTIANO = QEMTIANO AND AKTIF = 1;
  R_MASK0031 C_MASK0031%ROWTYPE;

  WDEGTAR DATE := NULL;
  WEMTIACINS VARCHAR2(1) := NULL;
BEGIN
  IF INSERTING THEN
     :NEW.NBARKOD := TO_NUMBER(:NEW.BARKOD);
  END IF;

  IF DELETING OR UPDATING THEN
     IF (UPDATING AND :OLD.NBARKOD <> :NEW.NBARKOD) OR DELETING THEN
        BEGIN
          SELECT 1 INTO WVAR FROM DESK0022 WHERE EMTIANO = :OLD.EMTIANO AND BARKOD = :OLD.NBARKOD AND ROWNUM = 1;
          RAISE_APPLICATION_ERROR (-20001,'Barkod hareket görmüş, güncelleyemez veya silemezsiniz...');
        EXCEPTION WHEN NO_DATA_FOUND THEN NULL;
        END;

        BEGIN
          SELECT 1 INTO WVAR FROM DESK0008 WHERE EMTIANO = :OLD.EMTIANO AND BARKOD = :OLD.NBARKOD AND ROWNUM = 1;
          RAISE_APPLICATION_ERROR (-20001,'Barkod sipariş hareketi görmüş, güncelleyemez veya silemezsiniz...');
        EXCEPTION WHEN NO_DATA_FOUND THEN NULL;
        END;
     END IF;
  END IF;

  IF (INSERTING OR UPDATING) AND :NEW.BARKOD <> TRIM(:NEW.BARKOD) THEN
     :NEW.BARKOD :=  TRIM(:NEW.BARKOD);
  END IF;

/*  IF (UPDATING AND :NEW.BARKOD <> :OLD.BARKOD) OR DELETING THEN
     BEGIN
       SELECT 1 INTO WVAR FROM DESK0022 WHERE BARKOD = :OLD.BARKOD AND ROWNUM = 1;
       RAISE_APPLICATION_ERROR (-20001,'Barkod hareket görmüş, güncelleyemez veya silemezsiniz...');
     EXCEPTION WHEN NO_DATA_FOUND THEN  NULL;
     END;
  END IF;   */

  IF INSERTING OR UPDATING THEN
     WEMTIACINS := NULL;
     BEGIN
       SELECT EMTIACINS INTO WEMTIACINS FROM MASK0001 WHERE EMTIANO = :NEW.EMTIANO;
     EXCEPTION WHEN NO_DATA_FOUND THEN WEMTIACINS := NULL;
     END;
     IF NVL(WEMTIACINS,' ') IN ('1','3','6') THEN
        OPEN C_MASK0031(:NEW.EMTIANO);
        LOOP
          FETCH C_MASK0031 INTO R_MASK0031;
          EXIT WHEN C_MASK0031%NOTFOUND;
          INSERT INTO MALGPOS1 (SIRKETNO,EMTIANO,DEGTAR) VALUES (R_MASK0031.SIRKETNO,R_MASK0031.EMTIANO,TRUNC(SYSDATE));
        END LOOP;
        CLOSE C_MASK0031;
     END IF;
  END IF;
  IF DELETING THEN
     WEMTIACINS := NULL;
     BEGIN
       SELECT EMTIACINS INTO WEMTIACINS FROM MASK0001 WHERE EMTIANO = :OLD.EMTIANO;
     EXCEPTION WHEN NO_DATA_FOUND THEN WEMTIACINS := NULL;
     END;
     IF NVL(WEMTIACINS,' ') = 1 THEN
        OPEN C_MASK0031(:OLD.EMTIANO);
        LOOP
          FETCH C_MASK0031 INTO R_MASK0031;
          EXIT WHEN C_MASK0031%NOTFOUND;
          INSERT INTO MALGPOS1 (SIRKETNO,EMTIANO,DEGTAR) VALUES (R_MASK0031.SIRKETNO,R_MASK0031.EMTIANO,TRUNC(SYSDATE));
        END LOOP;
        CLOSE C_MASK0031;
     END IF;
  END IF;
END;
/


CREATE OR REPLACE TRIGGER MAIN.R8SK0003 
BEFORE INSERT OR UPDATE ON MAIN.MASK0003
FOR EACH ROW
BEGIN
IF INSERTING  THEN
        :NEW.INP_USER := USER;
        :NEW.INP_DATE := SYSDATE;
ELSIF UPDATING  THEN
        :NEW.UPD_USER := USER;
        :NEW.UPD_DATE := SYSDATE;
END IF;
END;
/


DROP SEQUENCE MAIN.TQSK0003;

CREATE SEQUENCE MAIN.TQSK0003
  START WITH 349701
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 100
  NOORDER
  NOKEEP
  GLOBAL;


CREATE OR REPLACE TRIGGER MAIN.R9SK0003 
BEFORE INSERT OR UPDATE OR DELETE ON MAIN.MASK0003
FOR EACH ROW
BEGIN
  IF INSERTING THEN
     INSERT INTO TLSK0003 (DM_NUMBER,DM_TIP,DM_DATE,DM_USER,EMTIANO,BARKOD,BIRIM,AKTIF,BB,BARACIKLA)
VALUES (TQSK0003.NEXTVAL,'I',SYSDATE,USER,:NEW.EMTIANO,:NEW.BARKOD,:NEW.BIRIM,:NEW.AKTIF,:NEW.BB,:NEW.BARACIKLA);
END IF;
  IF UPDATING THEN
     IF :NEW.EMTIANO<>:OLD.EMTIANO OR :NEW.BARKOD<>:OLD.BARKOD THEN
     INSERT INTO TLSK0003 (DM_NUMBER,DM_TIP,DM_DATE,DM_USER,EMTIANO,BARKOD,BIRIM,AKTIF,BB,BARACIKLA)
VALUES (TQSK0003.NEXTVAL,'D',SYSDATE,USER,:OLD.EMTIANO,:OLD.BARKOD,:OLD.BIRIM,:OLD.AKTIF,:OLD.BB,:OLD.BARACIKLA);
     INSERT INTO TLSK0003 (DM_NUMBER,DM_TIP,DM_DATE,DM_USER,EMTIANO,BARKOD,BIRIM,AKTIF,BB,BARACIKLA)
VALUES (TQSK0003.NEXTVAL,'I',SYSDATE,USER,:NEW.EMTIANO,:NEW.BARKOD,:NEW.BIRIM,:NEW.AKTIF,:NEW.BB,:NEW.BARACIKLA);
     ELSE
     INSERT INTO TLSK0003 (DM_NUMBER,DM_TIP,DM_DATE,DM_USER,EMTIANO,BARKOD,BIRIM,AKTIF,BB,BARACIKLA)
VALUES (TQSK0003.NEXTVAL,'U',SYSDATE,USER,:NEW.EMTIANO,:NEW.BARKOD,:NEW.BIRIM,:NEW.AKTIF,:NEW.BB,:NEW.BARACIKLA);
     END IF;
  END IF;
  IF DELETING THEN
     INSERT INTO TLSK0003 (DM_NUMBER,DM_TIP,DM_DATE,DM_USER,EMTIANO,BARKOD,BIRIM,AKTIF,BB,BARACIKLA)
VALUES (TQSK0003.NEXTVAL,'D',SYSDATE,USER,:OLD.EMTIANO,:OLD.BARKOD,:OLD.BIRIM,:OLD.AKTIF,:OLD.BB,:OLD.BARACIKLA);
  END IF;
END;
/


CREATE OR REPLACE PUBLIC SYNONYM MASK0003 FOR MAIN.MASK0003;


ALTER TABLE MAIN.MASK0003 ADD (
  CONSTRAINT FKSK2003 
  FOREIGN KEY (EMTIANO, BIRIM) 
  REFERENCES MAIN.MASK0002 (EMTIANO, BIRIM)
  ENABLE VALIDATE);

GRANT ALTER, DELETE, INSERT, SELECT, UPDATE, ON COMMIT REFRESH, QUERY REWRITE, DEBUG, FLASHBACK ON MAIN.MASK0003 TO HAKLAR;
